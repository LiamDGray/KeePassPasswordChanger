<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>KeePass v2 Password Changer (the KeePassPasswordChanger Plugin) is a KeePass Plugin that allows you to change your passwords automatically.  

IMPORTANT: This is an early alpha plugin release, so PLEASE, BACKUP your DATABASE before using this PLUGIN. I have done my best in a short time, but I do not guarantee or be held responsible for anything. YOU HAVE BEEN WARNED
In addition, the plugin is not fully finished, there is a lot of work ahead to get this plugin to stable. Logging is also not complete. Allow the CefBrowser executable in your FW and AV.

Therefore, you can use Templates, which were created, distributed and updated online via the 'Public Templates Page'. These Templates are simple files, which can be imported via the plugin into your database. There is a section 'Private Templates' and 'Public Templates', so you can distinguish between public available and your own templates. After an import or an export, ensure that you backed up the files and delete them afterwards (especially private templates)

Templates:
A template is a collection of instructions for the plugins and is bound to an specific URL (like keepass.com). A instruction, for example, is 'Load a specific site in the browser', 'Get User Input' and so on. This Plugin uses Chromium Embedded Framework (CEF, chromium) as browser, especially CefSharp, so you are independent from your local installed browsers. You only need to make sure that you have .NET 4.5 installed.
A template can be exported. If you want to share your self-developed template, go to the 'Public Templates Page' and see the Contribution Guide there. Every template has to be checked by the Contributors to ensure, that there is no malicious content in there. If it passes this check, the template will be published on the 'Public Templates Page'.
When importing templates, newer versions of a template override templates with lower versions. Therefore, you can always import the whole public folder and can be sure, that you have the latest version of the template. 
When importing private/public templates, you will be asked for every template for your own safety.
For developing templates, please look @ the documentation at the plugin's page.
Template changes are applied instantly, so you don't have/are able to click save or cancel when modifying or deleting your Templates. When you are in Template editing mode, you can close windows with 'ESCAPE'.
Use Chrome when inspecting elements, so you can directly copy the xpath from the inspection console to the template element input form.

What happens during a run?
Your whole active database gets screened for entries (except the dustbin and the plugins folder). When the entry's URL matched a template's URL, the entry is provided for the password change. Next, you can see which entries would be changed. You can removed entries or add them again. You can also update entries, which haven't been changed since a specific date.
During a run, the outstanding changes are displayed and some browser windows may be visible. PLEASE DON'T CLICK ON THEM. When the templates needs your input, you will be prompted in a separate window. 
PLEASE, DON'T CLOSE THE PROGRAM WHEN THE PASSWORD CHANGE IS IN PROGRESS, as this may corrupt your database!  You may also deactivate other browser plugins or delete artifacts generated by them. For example KeeFox generated Passwords will get saved in the database and will be listed in the password change list.
When the password change progress is complete, you can close the window with the 'x'
NOTICE: If you encounter performance problems, please change the machine, as the browser is resource intensive.  
</value>
  </data>
  <data name="textBox2.Text" xml:space="preserve">
    <value>Used programs (You can find a copy of each license in the directory, where the plugin is located in):

CEF-SHARP - https://github.com/cefsharp/CefSharp
CEF - https://bitbucket.org/chromiumembedded/cef
Protocol Buffers - Google's data interchange format
http://protobuf-csharp-port.googlecode.com
</value>
  </data>
</root>